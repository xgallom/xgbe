//
// Created by Revolware Company on 2019-09-06.
//

#include "InstructionTable.h"
#include "Instructions/Advance.h"
#include "Instructions/AFRegister.h"
#include "Instructions/Addition.h"
#include "Instructions/Binary.h"
#include "Instructions/CbInstruction.h"
#include "Instructions/General.h"
#include "Instructions/Jumps.h"
#include "Instructions/Move.h"
#include "Instructions/Rotations.h"
#include "Instructions/Stack.h"
#include "Instructions/Substraction.h"

const Instruction::Handler InstructionTable[Instructions::InstructionsCount] = {
// 0x00
		NOP,
		LD<BC, D16, 12>,
		LD<IND<BC>, A, 8>,
		INC<BC>,
		INC<B>,
		DEC<B>,
		LD<B, D8, 8>,
		RLCA,
		LD<wA16, SP, 20>,
		ADD<HL, BC, 8>,
		LD<A, IND<BC>, 8>,
		DEC<BC>,
		INC<C>,
		DEC<C>,
		LD<C, D8, 8>,
		RRCA,
// 0x10
		STOP,
		LD<DE, D16, 12>,
		LD<IND<DE>, A, 8>,
		INC<DE>,
		INC<D>,
		DEC<D>,
		LD<D, D8, 8>,
		RLA,
		JP<R8, 12>,
		ADD<HL, DE, 8>,
		LD<A, IND<DE>, 8>,
		DEC<DE>,
		INC<E>,
		DEC<E>,
		LD<E, D8, 8>,
		RRA,
// 0x20
		JP<NZ, R8, 12, 8>,
		LD<HL, D16, 12>,
		LD<IND<HLI>, A, 8>,
		INC<HL>,
		INC<H>,
		DEC<H>,
		LD<H, D8, 8>,
		DAA,
		JP<ZF, R8, 12, 8>,
		ADD<HL, HL, 8>,
		LD<A, IND<HLI>, 8>,
		DEC<HL>,
		INC<L>,
		DEC<L>,
		LD<L, D8, 8>,
		CPL,
// 0x30
		JP<NC, R8, 12, 8>,
		LD<SP, D16, 12>,
		LD<IND<HLD>, A, 8>,
		INC<SP>,
		INC<IND<HL>, 12>,
		DEC<IND<HL>, 12>,
		LD<IND<HL>, D8, 12>,
		SCF,
		JP<CF, R8, 12, 8>,
		ADD<HL, SP, 8>,
		LD<A, IND<HLD>, 8>,
		DEC<SP>,
		INC<A>,
		DEC<A>,
		LD<A, D8, 8>,
		CCF,
// 0x40
		LD<B, B, 4>,
		LD<B, C, 4>,
		LD<B, D, 4>,
		LD<B, E, 4>,
		LD<B, H, 4>,
		LD<B, L, 4>,
		LD<B, IND<HL>, 8>,
		LD<B, A, 4>,
		LD<C, B, 4>,
		LD<C, C, 4>,
		LD<C, D, 4>,
		LD<C, E, 4>,
		LD<C, H, 4>,
		LD<C, L, 4>,
		LD<C, IND<HL>, 8>,
		LD<C, A, 4>,
//0x50
		LD<D, B, 4>,
		LD<D, C, 4>,
		LD<D, D, 4>,
		LD<D, E, 4>,
		LD<D, H, 4>,
		LD<D, L, 4>,
		LD<D, IND<HL>, 8>,
		LD<D, A, 4>,
		LD<E, B, 4>,
		LD<E, C, 4>,
		LD<E, D, 4>,
		LD<E, E, 4>,
		LD<E, H, 4>,
		LD<E, L, 4>,
		LD<E, IND<HL>, 8>,
		LD<E, A, 4>,
//0x60
		LD<H, B, 4>,
		LD<H, C, 4>,
		LD<H, D, 4>,
		LD<H, E, 4>,
		LD<H, H, 4>,
		LD<H, L, 4>,
		LD<H, IND<HL>, 8>,
		LD<H, A, 4>,
		LD<L, B, 4>,
		LD<L, C, 4>,
		LD<L, D, 4>,
		LD<L, E, 4>,
		LD<L, H, 4>,
		LD<L, L, 4>,
		LD<L, IND<HL>, 8>,
		LD<L, A, 4>,
//0x70
		LD<IND<HL>, B, 4>,
		LD<IND<HL>, C, 4>,
		LD<IND<HL>, D, 4>,
		LD<IND<HL>, E, 4>,
		LD<IND<HL>, H, 4>,
		LD<IND<HL>, L, 4>,
		HALT,
		LD<IND<HL>, A, 4>,
		LD<A, B, 4>,
		LD<A, C, 4>,
		LD<A, D, 4>,
		LD<A, E, 4>,
		LD<A, H, 4>,
		LD<A, L, 4>,
		LD<A, IND<HL>, 8>,
		LD<A, A, 4>,
// 0x80
		ADD<A, B>,
		ADD<A, C>,
		ADD<A, D>,
		ADD<A, E>,
		ADD<A, H>,
		ADD<A, L>,
		ADD<A, IND<HL>, 8>,
		ADD<A, A>,
		ADC<A, B>,
		ADC<A, C>,
		ADC<A, D>,
		ADC<A, E>,
		ADC<A, H>,
		ADC<A, L>,
		ADC<A, IND<HL>, 8>,
		ADC<A, A>,
// 0x90
		SUB<B>,
		SUB<C>,
		SUB<D>,
		SUB<E>,
		SUB<H>,
		SUB<L>,
		SUB<IND<HL>, 8>,
		SUB<A>,
		SBC<B>,
		SBC<C>,
		SBC<D>,
		SBC<E>,
		SBC<H>,
		SBC<L>,
		SBC<IND<HL>, 8>,
		SBC<A>,
// 0xa0
		AND<B>,
		AND<C>,
		AND<D>,
		AND<E>,
		AND<H>,
		AND<L>,
		AND<IND<HL>, 8>,
		AND<A>,
		XOR<B>,
		XOR<C>,
		XOR<D>,
		XOR<E>,
		XOR<H>,
		XOR<L>,
		XOR<IND<HL>, 8>,
		XOR<A>,
// 0xb0
		OR<B>,
		OR<C>,
		OR<D>,
		OR<E>,
		OR<H>,
		OR<L>,
		OR<IND<HL>, 8>,
		OR<A>,
		CP<B>,
		CP<C>,
		CP<D>,
		CP<E>,
		CP<H>,
		CP<L>,
		CP<IND<HL>, 8>,
		CP<A>,
// 0xc0
		RET<NZ>,
		POP<BC>,
		JP<NZ, wA16, 16, 12>,
		JP<wA16, 16>,
		CALL<NZ, wA16>,
		PUSH<BC>,
		ADD<A, D8, 8>,
		RST<0x00>,
		RET<ZF>,
		RET,
		JP<ZF, wA16, 16, 12>,
		CbInstruction,
		CALL<ZF, wA16>,
		CALL<wA16>,
		ADC<A, D8, 8>,
		RST<0x08>,
// 0xd0
		RET<NC>,
		POP<DE>,
		JP<NC, wA16, 16, 12>,
		XXX,
		CALL<NC, wA16>,
		PUSH<DE>,
		SUB<D8, 8>,
		RST<0x10>,
		RET<CF>,
		RETI,
		JP<CF, wA16, 16, 12>,
		XXX,
		CALL<CF, wA16>,
		XXX,
		SBC<D8, 8>,
		RST<0x18>,
// 0xe0
		LD<A8, A, 12>,
		POP<HL>,
		LD<INDB<C>, A, 8>,
		XXX,
		XXX,
		PUSH<HL>,
		AND<D8, 8>,
		RST<0x20>,
		ADD<SP, R8, 16>,
		JP<INDW<HL>, 4>,
		LD<A16, A, 16>,
		XXX,
		XXX,
		XXX,
		XOR<D8, 8>,
		RST<0x28>,
// 0xf0
		LD<A, A8, 12>,
		POP<AF>,
		LD<A, INDB<C>, 8>,
		DI,
		XXX,
		PUSH<AF>,
		OR<D8, 8>,
		RST<0x30>,
		LD_HL_SP_R8,
		LD<SP, HL, 8>,
		LD<A, A16, 16>,
		EI,
		XXX,
		XXX,
		CP<D8, 8>,
		RST<0x38>,
};

const char InstructionNameTable[Instructions::InstructionsCount][Instructions::MaxInstructionNameSize] = {
// 0x00
		"NOP",
		"LD<BC, D16, 12>",
		"LD<IND<BC>, A, 8>",
		"INC<BC>",
		"INC<B>",
		"DEC<B>",
		"LD<B, D8, 8>",
		"RLCA",
		"LD<wA16, SP, 20>",
		"ADD<HL, BC, 8>",
		"LD<A, IND<BC>, 8>",
		"DEC<BC>",
		"INC<C>",
		"DEC<C>",
		"LD<C, D8, 8>",
		"RRCA",
// 0x10
		"STOP",
		"LD<DE, D16, 12>",
		"LD<IND<DE>, A, 8>",
		"INC<DE>",
		"INC<D>",
		"DEC<D>",
		"LD<D, D8, 8>",
		"RLA",
		"JP<R8, 12>",
		"ADD<HL, DE, 8>",
		"LD<A, IND<DE>, 8>",
		"DEC<DE>",
		"INC<E>",
		"DEC<E>",
		"LD<E, D8, 8>",
		"RRA",
// 0x20
		"JP<NZ, R8, 12, 8>",
		"LD<HL, D16, 12>",
		"LD<IND<HLI>, A, 8>",
		"INC<HL>",
		"INC<H>",
		"DEC<H>",
		"LD<H, D8, 8>",
		"DAA",
		"JP<ZF, R8, 12, 8>",
		"ADD<HL, HL, 8>",
		"LD<A, IND<HLI>, 8>",
		"DEC<HL>",
		"INC<L>",
		"DEC<L>",
		"LD<L, D8, 8>",
		"CPL",
// 0x30
		"JP<NC, R8, 12, 8>",
		"LD<SP, D16, 12>",
		"LD<IND<HLD>, A, 8>",
		"INC<SP>",
		"INC<IND<HL>, 12>",
		"DEC<IND<HL>, 12>",
		"LD<IND<HL>, D8, 12>",
		"SCF",
		"JP<CF, R8, 12, 8>",
		"ADD<HL, SP, 8>",
		"LD<A, IND<HLD>, 8>",
		"DEC<SP>",
		"INC<A>",
		"DEC<A>",
		"LD<A, D8, 8>",
		"CCF",
// 0x40
		"LD<B, B, 4>",
		"LD<B, C, 4>",
		"LD<B, D, 4>",
		"LD<B, E, 4>",
		"LD<B, H, 4>",
		"LD<B, L, 4>",
		"LD<B, IND<HL>, 8>",
		"LD<B, A, 4>",
		"LD<C, B, 4>",
		"LD<C, C, 4>",
		"LD<C, D, 4>",
		"LD<C, E, 4>",
		"LD<C, H, 4>",
		"LD<C, L, 4>",
		"LD<C, IND<HL>, 8>",
		"LD<C, A, 4>",
//0x50
		"LD<D, B, 4>",
		"LD<D, C, 4>",
		"LD<D, D, 4>",
		"LD<D, E, 4>",
		"LD<D, H, 4>",
		"LD<D, L, 4>",
		"LD<D, IND<HL>, 8>",
		"LD<D, A, 4>",
		"LD<E, B, 4>",
		"LD<E, C, 4>",
		"LD<E, D, 4>",
		"LD<E, E, 4>",
		"LD<E, H, 4>",
		"LD<E, L, 4>",
		"LD<E, IND<HL>, 8>",
		"LD<E, A, 4>",
//0x60
		"LD<H, B, 4>",
		"LD<H, C, 4>",
		"LD<H, D, 4>",
		"LD<H, E, 4>",
		"LD<H, H, 4>",
		"LD<H, L, 4>",
		"LD<H, IND<HL>, 8>",
		"LD<H, A, 4>",
		"LD<L, B, 4>",
		"LD<L, C, 4>",
		"LD<L, D, 4>",
		"LD<L, E, 4>",
		"LD<L, H, 4>",
		"LD<L, L, 4>",
		"LD<L, IND<HL>, 8>",
		"LD<L, A, 4>",
//0x70
		"LD<IND<HL>, B, 4>",
		"LD<IND<HL>, C, 4>",
		"LD<IND<HL>, D, 4>",
		"LD<IND<HL>, E, 4>",
		"LD<IND<HL>, H, 4>",
		"LD<IND<HL>, L, 4>",
		"HALT",
		"LD<IND<HL>, A, 4>",
		"LD<A, B, 4>",
		"LD<A, C, 4>",
		"LD<A, D, 4>",
		"LD<A, E, 4>",
		"LD<A, H, 4>",
		"LD<A, L, 4>",
		"LD<A, IND<HL>, 8>",
		"LD<A, A, 4>",
// 0x80
		"ADD<A, B>",
		"ADD<A, C>",
		"ADD<A, D>",
		"ADD<A, E>",
		"ADD<A, H>",
		"ADD<A, L>",
		"ADD<A, IND<HL>, 8>",
		"ADD<A, A>",
		"ADC<A, B>",
		"ADC<A, C>",
		"ADC<A, D>",
		"ADC<A, E>",
		"ADC<A, H>",
		"ADC<A, L>",
		"ADC<A, IND<HL>, 8>",
		"ADC<A, A>",
// 0x90
		"SUB<B>",
		"SUB<C>",
		"SUB<D>",
		"SUB<E>",
		"SUB<H>",
		"SUB<L>",
		"SUB<IND<HL>, 8>",
		"SUB<A>",
		"SBC<B>",
		"SBC<C>",
		"SBC<D>",
		"SBC<E>",
		"SBC<H>",
		"SBC<L>",
		"SBC<IND<HL>, 8>",
		"SBC<A>",
// 0xa0
		"AND<B>",
		"AND<C>",
		"AND<D>",
		"AND<E>",
		"AND<H>",
		"AND<L>",
		"AND<IND<HL>, 8>",
		"AND<A>",
		"XOR<B>",
		"XOR<C>",
		"XOR<D>",
		"XOR<E>",
		"XOR<H>",
		"XOR<L>",
		"XOR<IND<HL>, 8>",
		"XOR<A>",
// 0xb0
		"OR<B>",
		"OR<C>",
		"OR<D>",
		"OR<E>",
		"OR<H>",
		"OR<L>",
		"OR<IND<HL>, 8>",
		"OR<A>",
		"CP<B>",
		"CP<C>",
		"CP<D>",
		"CP<E>",
		"CP<H>",
		"CP<L>",
		"CP<IND<HL>, 8>",
		"CP<A>",
// 0xc0
		"RET<NZ>",
		"POP<BC>",
		"JP<NZ, wA16, 16, 12>",
		"JP<wA16, 16>",
		"CALL<NZ, wA16>",
		"PUSH<BC>",
		"ADD<A, D8, 8>",
		"RST<0x00>",
		"RET<ZF>",
		"RET",
		"JP<ZF, wA16, 16, 12>",
		"CbInstruction",
		"CALL<ZF, wA16>",
		"CALL<wA16>",
		"ADC<A, D8, 8>",
		"RST<0x08>",
// 0xd0
		"RET<NC>",
		"POP<DE>",
		"JP<NC, wA16, 16, 12>",
		"XXX",
		"CALL<NC, wA16>",
		"PUSH<DE>",
		"SUB<D8, 8>",
		"RST<0x10>",
		"RET<CF>",
		"RETI",
		"JP<CF, wA16, 16, 12>",
		"XXX",
		"CALL<CF, wA16>",
		"XXX",
		"SBC<D8, 8>",
		"RST<0x18>",
// 0xe0
		"LD<A8, A, 12>",
		"POP<HL>",
		"LD<INDB<C>, A, 8>",
		"XXX",
		"XXX",
		"PUSH<HL>",
		"AND<D8, 8>",
		"RST<0x20>",
		"ADD<SP, R8, 16>",
		"JP<INDW<HL>, 4>",
		"LD<A16, A, 16>",
		"XXX",
		"XXX",
		"XXX",
		"XOR<D8, 8>",
		"RST<0x28>",
// 0xf0
		"LD<A, A8, 12>",
		"POP<AF>",
		"LD<A, INDB<C>, 8>",
		"DI",
		"XXX",
		"PUSH<AF>",
		"OR<D8, 8>",
		"RST<0x30>",
		"LD_HL_SP_R8",
		"LD<SP, HL, 8>",
		"LD<A, A16, 16>",
		"EI",
		"XXX",
		"XXX",
		"CP<D8, 8>",
		"RST<0x38>"
};
